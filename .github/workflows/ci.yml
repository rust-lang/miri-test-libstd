name: CI

on:
  pull_request:
  merge_group:
  schedule:
    - cron: '10 2 * * *' # At 02:10 UTC every day (a bit after rustup-components-history).

jobs:
  test-core:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: bash ./ci-setup.sh
      - name: Test
        run: bash ./ci-test.sh core

  test-alloc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: bash ./ci-setup.sh
      - name: Test
        run: bash ./ci-test.sh alloc

  test-std:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: bash ./ci-setup.sh
      - name: Test
        run: bash ./ci-test.sh std

  test-simd:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: bash ./ci-setup.sh
      - name: Test
        run: bash ./ci-test.sh simd

  test-stdarch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: bash ./ci-setup.sh
      - name: Test
        run: bash ./ci-test.sh stdarch

  # One job that "summarizes" the success state of this pipeline. This can then be added to branch
  # protection, rather than having to add each job separately.
  success:
    name: Success
    runs-on: ubuntu-latest
    needs: [test-core, test-alloc, test-std, test-simd, test-stdarch]
    # Github branch protection is exceedingly silly and treats "jobs skipped because a dependency
    # failed" as success. So we have to do some contortions to ensure the job fails if any of its
    # dependencies fails.
    if: always() # make sure this is never "skipped"
    steps:
      # Manually check the status of all dependencies. `if: failure()` does not work.
      - name: check if any dependency failed
        run: jq --exit-status 'all(.result == "success")' <<< '${{ toJson(needs) }}'

  # Make a PR to update `rust-version` when the cron job succeeds.
  # The primary reason for this is that Github stops running our cron job
  # if there is no repo activity for a while, so we use these PRs to generate activity.
  cron-success-pr:
    name: automatic rustup PR
    runs-on: ubuntu-latest
    needs: [success]
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
      - name: setup bot git name and email
        run: |
          git config --global user.name 'The Miri Cronjob Bot'
          git config --global user.email 'miri@cron.bot'
      - name: Create PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # If this is not the first of the month, stop here.
          if [[ $(date -u +%d) != "01" ]]; then
            echo "Only creating PR on the first of each month."
            exit 0
          fi
          # Create commit
          DATE=$(date -u +%Y-%m-%d)
          echo "nightly-$DATE" > rust-version
          git commit -am "automatic rustup"
          # Switch to a PR branch
          BRANCH="rustup-$DATE"
          git switch -c $BRANCH
          git push -u origin $BRANCH
          # Create PR
          gh pr create -B master --title 'Automatic Rustup' --body 'Please close and re-open this PR to trigger CI, then enable auto-merge'

  # Send a Zulip notification when a cron job fails
  cron-fail-notify:
    name: cronjob failure notification
    runs-on: ubuntu-latest
    needs: [success]
    if: github.event_name == 'schedule' && failure()
    steps:
      - name: Install zulip-send
        run: pip3 install zulip
      - name: Send Zulip notification
        shell: bash
        env:
          ZULIP_BOT_EMAIL: ${{ secrets.ZULIP_BOT_EMAIL }}
          ZULIP_API_TOKEN: ${{ secrets.ZULIP_API_TOKEN }}
        run: |
          ~/.local/bin/zulip-send --stream miri --subject "Cron Job Failure (miri-test-libstd, $(date -u +%Y-%m))" \
            --message 'Dear @*T-miri*,

          The standard library test suite is [failing under Miri]('"https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"'). Would you mind investigating this issue?

          Thanks in advance!
          Sincerely,
          The Miri Cronjobs Bot' \
            --user $ZULIP_BOT_EMAIL --api-key $ZULIP_API_TOKEN --site https://rust-lang.zulipchat.com
